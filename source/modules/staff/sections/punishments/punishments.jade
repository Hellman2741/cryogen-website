script.
  var punishments_filter = 'all'
  var punishments_page = 1
  var archived = false
  var create_type = null
  var create_severity = null
  var create_length = 1
  var checked = false
  var rights = "!{user.getRights()}"
  $(document).ready(() => {

    loadList()

    function loadList() {
      $.post('/staff/punishments', { action:'load-list', archive:archived, page:punishments_page, type:getType()}, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        $('#punishments-main').html(data.html)
        updatePage(data.pageTotal, punishments_page, 'punishments')
      })
    }

    function loadListWPage(archive, page) {
      punishments_page = page
      archived = archive
      loadList()
    }

    function getType() {
      switch(punishments_filter) {
        case 'all': return 2;
        case 'mutes': return 0;
        case 'bans': return 1;
      }
      return 2;
    }

    function switchFilter() {
      switch(punishments_filter) {
        case "all":
          punishments_filter = "mutes";
          break;
        case "mutes":
          punishments_filter = "bans";
          break;
        case "bans":
          punishments_filter = "all";
          break;
      }
      punishments_page = 1;
      removeFilters('punishments')
      loadList();

      var title = punishments_filter;
      var n_title = "";
      for(var i = 0; i < title.length; i++) {
        if(i == 0) n_title += title.charAt(i).toUpperCase();
        else n_title += title.charAt(i);
      }
      $('#punishments-filter').find('span').html(' '+n_title);
    }

    function switchArchive() {
      archived = !archived;
      punishments_page = 1;
      removeFilters('punishments')
      $('#archive-punishments').html(' View '+(archived ? 'Active' : 'Archive'))
      loadList();
    }

    function changePage() {
      var page = $(this).data('page')
      if(page == punishments_page)
        return false;
      punishments_page = page;
      loadList();
    }

    $('#create-punishments').click(viewCreate)
    $('#punishments-archive-btn').click(switchArchive)
    $('#punishments-filter').click(switchFilter)
    $('#search-punishments-icon').click(clickedSearchIcon)

    $(document).on('click', '#punishments-pages span', changePage)
    $(document).on('click', '#punish-link', viewPunishment)
    $(document).on('click', '#appeal-link', viewAppeal)
    $(document).on('click', '.ptype', switchType)
    $(document).on('click', '.pseverity', switchSeverity)
    $(document).on('click', '.plength', switchLength)
    $(document).on('click', '.name', clickName)
    $(document).on('click', '.remove-filter', clickedFilter);
    $(document).on('change keydown keyup', '#player-search', searchPlayer)

    //searching
    $('search-punishments-icon').attr('title', OPEN)

    function clickedSearchIcon() {
      clickSearchIcon('punishments', archived, punishments_page, loadListWPage, { 'type': getType() }, 'staff-punishments')
    }

    function clickedFilter() {
      clickRemoveFilter('punishments', $(this), archived, loadListWPage, { 'type': getType() }, 'staff-punishments')
    }

    $(document).keydown((e) => {
      var element = document.activeElement
      var focused = $(element)
      if(e.which == 13) {
        var text = focused.find('#view-report')
        if(text.length) {
          submitComment()
          return false
        }
        clickedSearchIcon();
      }
    })

    //view appeal
    function viewAppeal() {
      var id = $(this).closest('tr').data('id')
      $.post('/staff/punishments', { action:'view-appeal', id:id }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        var buttons = []
        if((rights > 1 || (rights == 1 && data.type == 0)) && data.status == 0) {
          buttons.push({
            addClass: 'btn btn-success', text: 'Accept', onClick: function($noty) {
              closeNoty($noty)
              viewAcceptAppeal(id)
            }
          })
          buttons.push({
            addClass: 'btn btn-danger', text: 'Decline', onClick: function($noty) {
              closeNoty($noty)
              viewDeclineAppeal(id)
            }
          })
        }
        buttons.push({
          addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
        })
        n = noty({
          text: 'View Appeal',
          type: 'confirm',
          layout: 'center',
          dismissQueue: false,
          template: data.html,
          theme: 'cryogen',
          buttons: buttons
        })
      })
    }

    function viewAcceptAppeal(id) {
      $.post('/staff/punishments', { action:'view-accept-appeal' }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        n = noty({
          text: 'Are you sure you wish to accept this appeal?',
          type: 'confirm',
          layout: 'center',
          dismissQueue: false,
          template: data.html,
          theme: 'cryogen',
          buttons: [
            {
              addClass: 'btn btn-primary', text: 'Accept', onClick: function($noty) {
                if(acceptAppeal(id))
                  closeNoty($noty)
              }
            },
            {
              addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
            }
          ]
        })
      })
    }

    function viewDeclineAppeal(id) {
      $.post('/staff/punishments', { action:'view-decline-appeal' }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        n = noty({
          text: 'Enter reasoning for declining.',
          type: 'confirm',
          layout: 'center',
          dismissQueue: false,
          template: data.html,
          theme: 'cryogen',
          buttons: [
            {
              addClass: 'btn btn-primary', text: 'Decline', onClick: function($noty) {
                if(declineAppeal(id))
                  closeNoty($noty)
              }
            },
            {
              addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
            }
          ]
        })
      })
    }

    function acceptAppeal(id) {
      $.post('/staff/punishments', { action:'accept-appeal', id:id }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        sendAlert('Appeal has been successfully accepted.')
        loadList()
        loadSection('appeals') //reload appeals section
        return true
      })
      return true
    }

    function declineAppeal(id) {
      var reason = $('#decline-reason').val()
      $.post('/staff/punishments', { action:'decline-appeal', id:id, reason:reason }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        sendAlert('Appeal has been successfully declined.')
        loadList()
        loadSection('appeals') //reload appeals section
        return true
      })
      return true
    }

    //extend/end code
    function viewChangePunishmentExpirationNoty(id) {
      $.post('/staff/punishments', { action:'view-extend' }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        n = noty({
          text: 'Enter new expiry date. Type "Never" to make the punishment permanent',
          type: 'confirm',
          layout: 'center',
          dismissQueue: false,
          template: data.html,
          theme: 'cryogen',
          buttons: [
            {
              addClass: 'btn btn-primary', text: 'Change Expiry', onClick: function($noty) {
                if(changePunishmentExpiration(id))
                  closeNoty($noty)
              }
            },
            {
              addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
            }
          ]
        })
      })
    }

    function changePunishmentExpiration(id) {
      var expiry = $('#expiry-date').val()
      if(expiry.toLowerCase() === 'never' && rights == 1) {
        sendAlert('Only Admins can make punishments permanent.')
        return false
      } 
      $.post('/staff/punishments', { action: 'change-punishment-expiration', id:id, expiry:expiry }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        sendAlert('Punishment expiration has been successfully changed.')
        loadList()
        loadSection('appeals') //reload appeals section
        return true
      })
      return true
    }

    function viewEndPunishNoty(id) {
      $.post('/utils', { action: 'view-noty' }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        n = noty({
          text: 'Are you sure you wish to end this punishment?',
          type: 'confirm',
          layout: 'center',
          dismissQueue: false,
          template: data.html,
          theme: 'cryogen',
          buttons: [
            {
              addClass: 'btn btn-primary', text: 'Yes', onClick: function($noty) {
                closeNoty($noty)
                endPunishment(id)
              }
            },
            {
              addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
            }
          ]
        })
      })
    }

    function endPunishment(id) {
      $.post('/staff/punishments', { action:'end-punishment', id:id }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        var alert = 'Punishment has been successfully ended'
        if(data.appeal)
          alert += ' and the appeal that was placed has been automatically accepted'
        sendAlert(alert+'.')
        loadList()
        loadSection('appeals') //reload appeals section
      })
    }

    //view punishment code

    function viewPunishment() {
      var id = $(this).closest('tr').data('id')
      $.post('/staff/punishments', { action:'view-punishment', id:id }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return null
        if(n != null) {
          n.show();
          return false
        }
        var buttons = []
        if(rights == 2 && data.status == 1) {
          buttons.push({
            addClass: 'btn btn-primary', text: 'Change Expiry', onClick: function($noty) {
              closeNoty($noty)
              viewChangePunishmentExpirationNoty(id)
            }
          })
          buttons.push({
            addClass: 'btn btn-danger', text: 'End', onClick: function($noty) {
              closeNoty($noty)
              viewEndPunishNoty(id)
            }
          })
        }
        buttons.push({
          addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
        })
        n = noty({
          text: 'View Punishment',
          type: 'confirm',
          layout: 'center',
          template: data.html,
          dismissQueue: false,
          theme: 'cryogen',
          buttons: buttons
        })
      })
    }

    function comment() {
      var elm = $('#view-punishment')
      var id = elm.data('id')
      var comment = elm.find('#comments')
      var textarea = elm.find('textarea').val()
      if(textarea.length < 5) {
        sendAlert('Comment must have a length of at least 5.')
        return
      }
      $.post('/staff/punishments', { action:'comment', id:id, comment:textarea }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        comment.html(data.html)
        elm.find('textarea').val('')
      })
    }

    //create punishment code

    function viewCreate() {
      var page = this
      $.post('/staff/punishments', { action:'view-create' }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return null
        if(n != null) {
          console.log('n is not null')
          n.show();
          return false
        }
        n = noty({
          text: 'Create Punishment',
          type: 'confirm',
          layout: 'center',
          template: data.html,
          dismissQueue: false,
          theme: 'cryogen',
          buttons: [
            {
              addClass: 'btn btn-primary', text: 'Submit', onClick: function($noty) {
                if(createPunishment()) {
                  closeNoty($noty)
                }
              }
            },
            {
              addClass: 'btn btn-danger', text: 'Cancel', onClick: closeNoty
            }
          ]
        })
        resetNoty()
      })
    }

    function resetNoty() {
      $('.ptype[data-type=mute]').prop('checked', true)
      $('.pseverity[data-type=account]').prop('checked', true)
      $('.plength[data-type=1]').prop('checked', true)
      create_type = 'mute'
      create_severity = 'account'
      create_length = 1
      checked = false
    }

    function createPunishment() {
      var name = $('#player-search').val()
      var reason = $('#punish-reason').val()
      if(!name) {
        sendAlert('Please fill out a name first!')
        return false
      }
      if(reason.length < 15) {
        sendAlert('Please fill out a reason with at least 15 characters!')
        return false
      }
      if(rights == 1) {
        if(create_type == 'ban') {
          sendAlert('Only Admins can ban players!')
          return false
        } else if(create_severity == 'ip') {
          sendAlert('Only Admins can mute IPs!')
          return false
        } else if(create_length == -1) {
          sendAlert('Only Admins can permanently mute players!')
          return false
        }
      }
      if(!checked) {
        checked = true
        sendAlert('Press submit again to confirm these details and apply the punishment!')
        return false
      }
      checked = false
      $.post('/staff/punishments', { action:'create', name:name, type:create_type, severity:create_severity, length:create_length, reason:reason }, (ret) => {
        var data = getJSON(ret)
        if(data == null) return false
        sendAlert('Punishment successfully applied!')
        loadList()
      })
      return true
    }

    function clickName() {
      var element = $(this).closest('.player-value')
      var name = element.data('name');
      var id = element.data('id');
      $('#player-search').blur();
      $('#player-search').css({
        "border-bottom-left-radius": "4px",
        "border-bottom-right-radius": "4px"
      });
      $('#player-search').val(name);
      $('.player-list').css('display', 'none');
    }

    function searchPlayer() {
      var name = $(this).val();
      var list = $('.player-list');
      list.empty();
      if(name == '') {
        $(this).css({
          "border-bottom-left-radius": "4px",
          "border-bottom-right-radius": "4px"
        });
        list.css('display', 'none');
        list.empty();
        return;
      }
      $(this).css({
        "border-bottom-left-radius": "0px",
        "border-bottom-right-radius": "0px"
      });
      $.post('/staff/punishments', { action:'search-players', text:name }, function(ret) {
        var data = getJSON(ret)
        if(data == null) return false;
        list.empty();
        list.css('display', '');
        var dl = JSON.parse(data.list)
        for(var i = 0; i < dl.length; i++) {
          var user = dl[i]
          var node = $('<div class="link player-value"></div>');
          var n = $('<div class="name"></div>');
          n.html(user.display+' ('+user.username+')');
          node.data('name', user.username);
          node.html(n);
          list.append(node)
        }
      });
    }

    function switchType() {
      checked = false
      this.create_type = $(this).data('type')
      $('.ptype').prop('checked', false)
      $(this).prop('checked', true)
      return true;
    }

    function switchSeverity() {
      checked = false
      this.create_severity = $(this).data('type')
      $('.pseverity').prop('checked', false)
      $(this).prop('checked', true)
      return true;
    }

    function switchLength() {
      checked = false
      this.create_length = $(this).data('type')
      $('.plength').prop('checked', false)
      $(this).prop('checked', true)
      return true;
    }

  })
h5 Punishments
p.small.info The following are the active and expired punishments on players
p.small.info You can navigate through them using the archive button and search feature
p.small.info Please thoroughly read the threads within the staff section on the forums before using this section.
div.row 
  div.iactions
    div
      div(style='float: left; margin: 10px 10px;')
        div.col-xs-4
          p.color-grey.search-info Click the search icon to begin searching through punishments. Search using filters with filter:value and separate with commas. True/false or yes/no can be used.
        div.col-xs-4
          p.color-grey.search-info Filters: username: (name), reason: (string in reason), date: (dd/mm/yyyy-dd/mm/yyyy), expiry: (dd/mm/yyyy-dd/mm/yyyy)
        div.col-xs-4
          p.color-grey.search-info Example: username:cody, date:2/6/2018-10/6/2018
      div(style='float: right; margin: 33.5px 5px;')
        div.link#create-punishments
          i.fa.fa-plus-square
          span  New
        div.link#punishments-filter
          i.fa.fa-filter
          span  All
        div.link#punishments-archive-btn
          i.fa.fa-archive
          span#archive-punishments  View Archive
div.row(style='padding: 15px;')
  div#search-punishments(style='clear: both; float: right; margin-bottom: 15px; text-align: left;')
    div
      span.fa.fa-search.link#search-punishments-icon(style='display: inline; float: right; padding-left: 5px; margin-top: 7px;')
      div#search-punishments-pin(style='float: right; display: none;', display='none')
        input.form-control(type='text', placeholder='Search', style='max-width: 150px; max-height: 30px; background: #111; border: #000; display: inline!important;')
  div.search-filters-punishments(style='clear: both; float: right;')
  div.col-md-12(style='border: 1px solid #000; clear: both; margin-bottom: 10px;')
  div#punishments-main
  div.pages
    div#punishments-pages
